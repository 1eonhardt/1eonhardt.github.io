<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>栈笔记</title>
    <url>/2020/02/06/dsa_stack_note/</url>
    <content><![CDATA[<h2 id="栈stack"><a class="markdownIt-Anchor" href="#栈stack"></a> 栈(Stack)</h2>
<h3 id="栈的定义"><a class="markdownIt-Anchor" href="#栈的定义"></a> 栈的定义</h3>
<p>栈可定义为只允许在表的末端进行插入和删除的线性表。又叫后进先出的线性表(LIFO)。允许插入和删除的一端叫栈顶(top),另一端叫栈底(bottom)。</p>
<a id="more"></a>
<h3 id="如何实现"><a class="markdownIt-Anchor" href="#如何实现"></a> 如何实现</h3>
<h4 id="顺序栈"><a class="markdownIt-Anchor" href="#顺序栈"></a> 顺序栈</h4>
<p>用顺序表或数组实现。<br />
用数组存储数据，数组[0]为栈底，数组最后一个非零元素为栈顶，用top标识。<br />
入栈时，数据加到top+1位置。需要考虑栈溢出的情况。<br />
出栈时，移除top位置数据。需要考虑空栈的情况。</p>
<h4 id="共享栈"><a class="markdownIt-Anchor" href="#共享栈"></a> 共享栈</h4>
<p>用一个数组定义两个栈：定义一个足够的栈空间。将空间两端设为栈底，用b[0],b[1]指示，栈顶用t[0],t[1]标记。t[x]=b[x]空栈时相应的栈为空，t[0]+1==t[1]时，栈满。</p>
<h4 id="链式栈"><a class="markdownIt-Anchor" href="#链式栈"></a> 链式栈</h4>
<h3 id="复杂度分析"><a class="markdownIt-Anchor" href="#复杂度分析"></a> 复杂度分析</h3>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>DataStructure</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>绪论</title>
    <url>/2020/02/06/dsa_introduction/</url>
    <content><![CDATA[<h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2>
<h3 id="基本术语"><a class="markdownIt-Anchor" href="#基本术语"></a> 基本术语</h3>
<ul>
<li>数据：信息的载体，描述客观事物属性的符号的集合</li>
<li>数据元素：数据的基本单位，通常作为一个整体来考虑。比如数据库中的一条记录。</li>
<li>数据项：构成数据元素的最小单位。如数据库记录中的某一个字段。</li>
<li>数据对象：具有相同性质的数据元素的集合。比如整数。</li>
<li>数据类型：一个值的集合和定义在此集合上的一组操作的总称。
<ul>
<li>原子类型：值不可分割</li>
<li>结构类型：值还可以分割</li>
<li>抽象数据类型</li>
</ul>
</li>
<li>抽象数据类型：包含数据对象，数据关系和基本操作集。其定义侧重于逻辑特性，而与实现无关。</li>
<li>数据结构：数据元素之间的关系。</li>
</ul>
<h3 id="三要素"><a class="markdownIt-Anchor" href="#三要素"></a> 三要素</h3>
<h3 id="逻辑结构"><a class="markdownIt-Anchor" href="#逻辑结构"></a> 逻辑结构</h3>
<p>用于算法设计层面，主要类型有：</p>
<ul>
<li>集合：数据元素之间<strong>没有关系</strong></li>
<li>线性结构：数据元素之间只有<strong>一对一</strong>的关系</li>
<li>树形结构：数据元素之间有<strong>一对多</strong>的关系</li>
<li>图或网状结构：数据元素之间有<strong>多对多</strong>的关系</li>
</ul>
<h3 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构"></a> 存储结构</h3>
<h4 id="顺序存储"><a class="markdownIt-Anchor" href="#顺序存储"></a> 顺序存储</h4>
<p>把逻辑上相邻的元素存储在物理上相邻的存储单元中。</p>
<ul>
<li>优点：可以实现<strong>随机存取</strong>(通过首地址和元素序号可在O(1)时间内找到指定元素)，每个元素占用最少空间</li>
<li>缺点：只能使用相邻的一整块的存储单元，会产生较多外部碎片。增删元素会比较麻烦。</li>
</ul>
<h4 id="链式存储"><a class="markdownIt-Anchor" href="#链式存储"></a> 链式存储</h4>
<p>通过指针来表示元素之间的逻辑关系。</p>
<ul>
<li>优点：不会出现碎片，空间利用率高</li>
<li>缺点：不能实现随机存取。且每个元素占用额外的存储指针的空间。</li>
</ul>
<h4 id="索引存储"><a class="markdownIt-Anchor" href="#索引存储"></a> 索引存储</h4>
<p>储存信息的同时，建立附加的索引表。</p>
<ul>
<li>优点：检索速度快</li>
<li>缺点：增加索引表后占用了更多空间。且在增删时需要修改索引表，会花费更多时间。</li>
</ul>
<h4 id="散列存储"><a class="markdownIt-Anchor" href="#散列存储"></a> 散列存储</h4>
<p>根据元素的关键字直接算出元素的存储地址</p>
<ul>
<li>优点：检索，增，删都很快</li>
<li>缺点：如果散列函数不好，可能会产生冲突。解决冲突会增加时间和空间开销。</li>
</ul>
<h2 id="算法algorithm"><a class="markdownIt-Anchor" href="#算法algorithm"></a> 算法(Algorithm)</h2>
<h3 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h3>
<ul>
<li>语句的频度：指该语句在算法中被重复执行的次数。</li>
<li>T(n)：算法中所有语句的频度之和</li>
<li>f(n)：算法中基本运算(最深层循环内的语句)的频度。</li>
<li>大O表示法：若T(n)和f(n)是定义在正整数集合上的两个函数，则存在正常数C和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>C</mi><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0 \leq T(n) \leq Cf(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
</ul>
<h3 id="空间复杂度"><a class="markdownIt-Anchor" href="#空间复杂度"></a> 空间复杂度</h3>
<p>S(n)定义为该算法所耗费的存储空间。<br />
空间复杂度分析只需要分析出输入和程序本身所占空间以外的空间。<br />
算法<strong>原地工作</strong>，指算法所需的辅助空间为常量，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<h3 id="常用大小比较"><a class="markdownIt-Anchor" href="#常用大小比较"></a> 常用大小比较</h3>
<p>$O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(2^n) &lt; O(n!) $</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>DataStructure</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表笔记</title>
    <url>/2020/02/06/dsa_list_note/</url>
    <content><![CDATA[<h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h2>
<p>具有相同数据类型的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>≥</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n \geq 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>个数据元素的有限序列。其一般表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L=(a_1,a_2,\dots,a_i,a_{i+1},\dots,a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。除了表头元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 以外，每个元素有且仅有一个直接前驱。除表尾元素外，每个元素有且仅有一个直接后继。</p>
<a id="more"></a>
<p>特点：</p>
<ul>
<li>表中元素个数有限</li>
<li>元素具有逻辑上的顺序</li>
<li>元素都是数据元素？</li>
<li>元素数据类型相同，意味着每个元素占有相同大小的存储空间</li>
<li>元素具有抽象性，只关心元素之间的关系，而不关心具体存储的内容</li>
</ul>
<p>主要操作：</p>
<ul>
<li>初始化</li>
<li>求表长</li>
<li>按位查找</li>
<li>按值查找</li>
<li>插入</li>
<li>删除</li>
<li>判空</li>
<li>销毁</li>
<li>输出</li>
</ul>
<h2 id="顺序表"><a class="markdownIt-Anchor" href="#顺序表"></a> 顺序表</h2>
<p>即线性表的顺序存储。</p>
<h3 id="基本操作实现"><a class="markdownIt-Anchor" href="#基本操作实现"></a> 基本操作实现</h3>
<ul>
<li>插入：注意插入位置是否合法以及插入位置之后所有元素都要右移。
<ul>
<li>最好情况：表尾插入 O(1)</li>
<li>最坏情况：表头插入 O(n)</li>
<li>平均情况：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup><msub><mi>P</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n+1}P_i(n-i+1)=\frac n2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
</ul>
</li>
<li>删除：复杂度基本同上，一般要返回被删除的值</li>
<li>按值查找：复杂度基本同上，注意考虑查找失败的情况</li>
</ul>
<h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        例题1代码
    </div>
    <div class='spoiler-content'>
        <div class="note info">
            <p>合并两个有序表，返回一个新的有序表</p>
          </div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">SeqList <span class="title">MergeOrderedList</span><span class="params">(SeqList &amp;a, SeqList &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqList m;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>, k=<span class="number">0</span>;</span><br><span class="line">    m.data = <span class="keyword">new</span> <span class="keyword">int</span>[a.length + b.length];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.length &amp;&amp; j &lt; b.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从m[0]开始，按顺序录入a，b当前元素中较小的那一个，直到较小的顺序表被遍历完</span></span><br><span class="line">        <span class="keyword">if</span> (a.data[i] &lt; b.data[j])</span><br><span class="line">            m.data[k++] = a.data[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            m.data[k++] = b.data[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 录入a或b剩下的元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.length)</span><br><span class="line">        m.data[k++] = a.data[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; b.length)</span><br><span class="line">        m.data[k++] = b.data[j++];</span><br><span class="line">    m.length = k;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        例题2
    </div>
    <div class='spoiler-content'>
        <div class="note info">
            <p>在一个数组中存放两个线性表，交换这两个表的位置。(相当于循环左移一个左表长)<br />如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>5</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo>&gt;</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>3</mn></msub><mo separator="true">,</mo><mi>a</mi><msub><mn>1</mn><mo separator="true">,</mo></msub><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>5</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a_1, a_2, a_3, a_4, a_5, b_1, b_2, b_3)=&gt;(b_1, b_2, b_3, a1_, a_2, a_3, a_4, a_5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.07610800000000001em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。实际上，相当于整个表向左循环左移了5位。</p>
          </div>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right || right &gt; size)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> temp, mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mid - left; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = arr[left + i];</span><br><span class="line">        arr[left + i] = arr[right - i];</span><br><span class="line">        arr[right - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先将数组整个逆置，再将两个线性表部分分别逆置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exchange</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Reverse(arr, <span class="number">0</span>, m + n - <span class="number">1</span>, m + n);</span><br><span class="line">    Reverse(arr, <span class="number">0</span>, n - <span class="number">1</span>, m);</span><br><span class="line">    Reverse(arr, n, m + n - <span class="number">1</span>, m + n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h2 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h2>
<h3 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h3>
<p>线性表的链式存储。每个节点中除了数据元素，还需要一个指针，指向其后继节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    T data;</span><br><span class="line">    LNode *next;</span><br><span class="line">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure>
<p>头结点：为了操作方便而引入的链表中的第一个节点。</p>
<ul>
<li>头结点通常不存储数据</li>
<li>引入头结点后，链表第一位置和其他位置操作一样了。</li>
<li>空表和非空表处理也一样了。</li>
</ul>
<p>头指针：始终指向链表的第一个节点。类似于数组指针指向的地址实际上就是数组第一个元素的地址，链表指针实际上就是头指针。</p>
<h4 id="建表"><a class="markdownIt-Anchor" href="#建表"></a> 建表</h4>
<p>头插法：元素录入顺序和生成的链表中的元素数据顺序相反。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        头插法代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    L = <span class="keyword">new</span> LNode; <span class="comment">// 创建头结点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 初始为空</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">99</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode; <span class="comment">// 创建新结点</span></span><br><span class="line">        s-&gt;data = x; <span class="comment">// 输入数据</span></span><br><span class="line"></span><br><span class="line">        s-&gt;next = L-&gt;next; <span class="comment">// 在头结点后插入新节点，L为头指针</span></span><br><span class="line">        L-&gt;next = s;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList l;</span><br><span class="line">    l = List_HeadInsert(l);</span><br><span class="line">    <span class="keyword">while</span> (l-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l = l-&gt;next;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; l-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依次输入1,2,3,4,5,6 会输出 6,5,4,3,2,1。</span></span><br></pre></td></tr></table></figure>

    </div>
</div>
<p><img src="../images/hexo_list_note_1.png" alt="图片不见啦&gt;_&lt;" /></p>
<p>尾插法：元素录入顺序和生成的链表中的元素数据顺序相同。</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        尾插法代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_RearInsert</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    LNode *s, *r = L; <span class="comment">// r为表尾指针，初始在头结点出</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">99</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line"></span><br><span class="line">        r-&gt;next = s; <span class="comment">// 尾结点指针指向新节点</span></span><br><span class="line">        r = s; <span class="comment">// r移动到新的表尾结点</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 尾结点指针置空</span></span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依次输入1,2,3,4,5,6 会输出 1,2,3,4,5,6。</span></span><br></pre></td></tr></table></figure>

    </div>
</div>
<p><img src="../images/hexo_list_note_2.png" alt="图片不见啦&gt;_&lt;" /></p>
<h4 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h4>
<p>按值查找和按序查找，算法都是从头遍历，直到找到相应结点。<br />
按值查找需要一个临时变量计数，按序查找只要比较数据域是否相同。时间复杂度都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要找到前驱结点O(n)，插入O(1) 插入到第i个位置</span></span><br><span class="line">p = GetElem(L, i - <span class="number">1</span>); <span class="comment">// 找到前驱结点</span></span><br><span class="line">s-&gt;next = p-&gt;next; <span class="comment">// 让新结点s的next指向前驱结点p的next</span></span><br><span class="line">p-&gt;next = s; <span class="comment">// 再将p的next指向新节点s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要找前驱结点的方法:将结点插到第i+1个位置，再交换两个节点内的数据 O(1)</span></span><br><span class="line">s-&gt;next = pi-&gt;next; <span class="comment">// 修改指针域</span></span><br><span class="line">pi-&gt;next = s;</span><br><span class="line">temp = pi-&gt;data; <span class="comment">// 交换数据域</span></span><br><span class="line">pi-&gt;data = s-&gt;data;</span><br><span class="line">s-&gt;data = temp;</span><br></pre></td></tr></table></figure>
<h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4>
<p>类似插入。可以找前驱结点，在删除其后继。也可以先将后继的值赋给自身，再删除后继。</p>
<h4 id="求表长"><a class="markdownIt-Anchor" href="#求表长"></a> 求表长</h4>
<p>遍历，计数。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<h3 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h3>
<p>就是在单链表结点中加了一个指向前驱的指针。方便找到前驱结点。又因为每个节点有两个指针，插入和删除时指针变化复杂了一点。</p>
<p><img src="../images/hexo_list_note_3.png" alt="图片不见啦&gt;_&lt;" /></p>
<p><img src="../images/hexo_list_note_4.png" alt="图片不见啦&gt;_&lt;" /></p>
<h3 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h3>
<p>表中最后一个元素的next指针指向头结点。循环链表可以从任意节点开始遍历整个链表。<br />
Tip：如果常用操作都是在表头表尾进行的，可以不用头指针，而用尾指针。(r是尾指针,r-&gt;next即为头指针)。</p>
<p>循环双链表，略。注意当其为空表时，其头结点的prior和next都指向自己。</p>
<h3 id="静态链表"><a class="markdownIt-Anchor" href="#静态链表"></a> 静态链表</h3>
<p>用结点数组来表示线性表的链式存储结构。即把数组下标当做指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    T data;</span><br><span class="line">    <span class="keyword">int</span> next; <span class="comment">// 下一个元素的数组下标</span></span><br><span class="line">&#125; SLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure>
<h3 id="顺序表和链表的比较"><a class="markdownIt-Anchor" href="#顺序表和链表的比较"></a> 顺序表和链表的比较</h3>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">顺序表</th>
<th style="text-align:center">链表</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">存取方式</td>
<td style="text-align:center">可以顺序存取，也可以随机存取</td>
<td style="text-align:center">只能顺序存取</td>
</tr>
<tr>
<td style="text-align:center">物理结构</td>
<td style="text-align:center">物理存储位置相邻</td>
<td style="text-align:center">存储位置不相邻</td>
</tr>
<tr>
<td style="text-align:center">按值查找</td>
<td style="text-align:center">无序时O(n),有序O(logn)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">按序查找</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(n)</td>
</tr>
<tr>
<td style="text-align:center">插入删除</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
</tr>
<tr>
<td style="text-align:center">空间分配</td>
<td style="text-align:center">需要预先分配存储空间，如果溢出，扩容需要移动大量元素。 如果预分配的空间过大，又会造成浪费。</td>
<td style="text-align:center">需要时申请分配，灵活，高效。</td>
</tr>
</tbody>
</table>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>DataStructure</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>next 技巧</title>
    <url>/2020/02/05/next_usage/</url>
    <content><![CDATA[<h2 id="配置-hexo-本地搜索"><a class="markdownIt-Anchor" href="#配置-hexo-本地搜索"></a> 配置 hexo 本地搜索</h2>
<p>安装插件 <code>npm install hexo-generator-searchdb --save</code><br />
然后我们修改站点配置_config.yml 文件，添加如下内容：</p>
<a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>然后修改主题配置文件_config.yml：搜local_search,将enable设为true。</p>
<h2 id="修改背景图片和透明度"><a class="markdownIt-Anchor" href="#修改背景图片和透明度"></a> 修改背景图片和透明度</h2>
<p>修改next配置文件_config.yml，添加一个用于自定义样式的文件。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(<span class="regexp">/images/</span>cyberpunk2077.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed; <span class="comment">//不重复</span></span><br><span class="line">    background-size: cover;      <span class="comment">//填充</span></span><br><span class="line">    background-position:<span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//博客内容透明化</span></span><br><span class="line"><span class="comment">//文章内容的透明度设置</span></span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//侧边框的透明度设置</span></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单栏的透明度设置</span></span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索框（local-search）的透明度设置</span></span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="标签插件tag-plugins"><a class="markdownIt-Anchor" href="#标签插件tag-plugins"></a> 标签插件（Tag Plugins）</h2>
<p>hexo私有的markdown语法。Tag中的内容不支持MathJax。数学公式显示不出来。</p>
<h3 id="文本居中引用-centered-quote"><a class="markdownIt-Anchor" href="#文本居中引用-centered-quote"></a> 文本居中引用 - Centered Quote</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><p>世间所有的相遇，都是久别重逢</p>
</blockquote>
<h3 id="提示块-note"><a class="markdownIt-Anchor" href="#提示块-note"></a> 提示块 - Note</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% note <span class="keyword">default</span> %&#125;</span><br><span class="line"><span class="keyword">default</span> 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题配置文件中可以修改风格</span></span><br><span class="line"># Note tag (bs-callout).</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  # 风格</span><br><span class="line">  style: flat</span><br><span class="line">  # 要不要图标</span><br><span class="line">  icons: <span class="literal">true</span></span><br><span class="line">  # 圆角矩形</span><br><span class="line">  border_radius: <span class="number">3</span></span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>显示效果</p>
<div class="note default">
            <p>default 提示块标签</p>
          </div>
<div class="note primary">
            <p>primary 提示块标签</p>
          </div>
<div class="note success">
            <p>success 提示块标签</p>
          </div>
<div class="note info">
            <p>info 提示块标签</p>
          </div>
<div class="note warning">
            <p>warning 提示块标签</p>
          </div>
<div class="note danger">
            <p>danger 提示块标签</p>
          </div>
<h3 id="按钮-button"><a class="markdownIt-Anchor" href="#按钮-button"></a> 按钮 - Button</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br><span class="line"><span class="comment">// url : 绝对或相对 URL</span></span><br><span class="line"><span class="comment">// text : 按钮文字，如果未指定图标则为必须</span></span><br><span class="line"><span class="comment">// icon : FontAwesome 图标名称。如果未指定文本，则为必需</span></span><br><span class="line"><span class="comment">// [class] : FontAwesome 类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X ，可选参数。</span></span><br><span class="line"><span class="comment">// [title] : 鼠标悬停时的工具提示，可选参数。</span></span><br><span class="line"><span class="comment">// 外面最好加一层div</span></span><br></pre></td></tr></table></figure>
<div><a class="btn" href="https://1eonhardt.github.io/ " target="_blank" rel="noopener" title="这是我的个人博客首页"><i class="fa fa-home fa-fw"></i>首页</a></div>
<h3 id="iframe"><a class="markdownIt-Anchor" href="#iframe"></a> iframe</h3>
<p>在文章中插入 iframe。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
<iframe src="http://www.baidu.com/" width="400" height="250" frameborder="0" loading="lazy" allowfullscreen></iframe>
<h3 id="插入指定大小的图片"><a class="markdownIt-Anchor" href="#插入指定大小的图片"></a> 插入指定大小的图片</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] '"title text" "alt text"' %&#125;</span><br></pre></td></tr></table></figure>
<img src="/images/pink_girl.jpg" class="" width="300" height="480" title="pink_girl PINK_GIRL">
<h2 id="添加音乐播放器"><a class="markdownIt-Anchor" href="#添加音乐播放器"></a> 添加音乐播放器</h2>
<p>下载<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener" title="Aplayer">Aplayer</a>源码到本地，解压后将 dist 文件夹复制到 themes\next\source 文件夹下。</p>
<p>在themes\next\layout_layout.swig文件，body标签内，加上以下代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/dist/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">  <span class="attr">server</span>=<span class="string">"netease"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"playlist"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"1984358829"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">mini</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fixed</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">list-folded</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>id: song id / playlist id / album id / search keyword</li>
<li>server: netease, tencent, kugou, xiami, baidu</li>
<li>type: song, playlist, album, search, artist</li>
<li>order: list, random</li>
<li>loop: all, one</li>
<li>list-max-height: 列表高度</li>
</ul>
<p>实现页面跳转不重新播放：开启pjax</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 进入themes&#x2F;next文件夹，下载pjax</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-pjax source&#x2F;lib&#x2F;pjax</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改next配置文件</span><br><span class="line">pjax: true</span><br><span class="line">vendors:</span><br><span class="line">  pjax: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-pjax@0&#x2F;pjax.min.js</span><br></pre></td></tr></table></figure>
<h2 id="添加标签云"><a class="markdownIt-Anchor" href="#添加标签云"></a> 添加标签云</h2>
<p>首先在hexo的package.json中添加依赖<code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code>，用<code>npm install</code>安装后，在<code>next/layout/_macro/sidebar.swig</code>位置添加以下代码(也可以使用next配置文件中custom_file_path指定的sidebar.swig路径)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('/js/tagcloud.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('/js/tagcanvas.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>Tag Cloud<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCanvasContainer"</span> <span class="attr">class</span>=<span class="string">"widget tagcloud"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">id</span>=<span class="string">"resCanvas"</span> <span class="attr">style</span>=<span class="string">"width=100%"</span>&gt;</span></span><br><span class="line">                  &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>在next的配置文件中搜tagcloud可以修改配置。</p>
<h2 id="样式修改"><a class="markdownIt-Anchor" href="#样式修改"></a> 样式修改</h2>
<p>在博客页面按F12，用最左上角的检查元素功能，选中想修改的部分，在elements中找到相应元素对应的class。在自定义的styles.styl文件中，修改样式即可,如：</p>
<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        示例
    </div>
    <div class='spoiler-content'>
        <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 侧边栏样式</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章样式</span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章周围空白</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(<span class="number">202</span>,<span class="number">203</span>,<span class="number">203</span>,<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(<span class="number">202</span>,<span class="number">203</span>,<span class="number">204</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h2 id="内容折叠"><a class="markdownIt-Anchor" href="#内容折叠"></a> 内容折叠</h2>
<p>文章中有大段代码的话会不太好看。通过安装<code>hexo-spoiler</code>插件，即可解决。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 安装插件</span><br><span class="line">npm install hexo-sliding-spoiler --save</span><br><span class="line"></span><br><span class="line">// 如果hexo没有自动检测到插件，则需要在hexo配置文件中添加</span><br><span class="line">plugins:</span><br><span class="line"> - hexo-sliding-spoiler</span><br><span class="line"></span><br><span class="line">// 使用方式 效果看上面样式修改部分</span><br><span class="line">&#123;% spoiler title %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 语法</title>
    <url>/2020/02/05/cpp_grammar/</url>
    <content><![CDATA[<h2 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h2>
<h3 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h3>
<p>C++中引用相当于给变量起别名。</p>
<ul>
<li>不能有空引用</li>
<li>必须在创建时初始化</li>
<li>初始化后不可变</li>
</ul>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;ra = a; <span class="comment">// 给a取了个别名ra</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">ra = b; <span class="comment">// 实际上是给ra赋值，而不是重新指定引用</span></span><br><span class="line">ra = <span class="number">5</span>; <span class="comment">// ra和a是同一块内存。修改ra就是修改a</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ra &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>将引用作为<strong>参数</strong>，表示传入的是原参数的一个别名。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值传递，left,right是实参的一个副本，修改left和right不会对原变量产生影响</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span> <span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp = left;</span><br><span class="line">     left = right ;</span><br><span class="line">     right = temp ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用传递, left,right是传进来的变量的别名，修改left和right，就是修改原变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span> <span class="params">(<span class="keyword">int</span> &amp;left, <span class="keyword">int</span> &amp;right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp = left;</span><br><span class="line">     left = right ;</span><br><span class="line">     right = temp ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用时直接传相应类型的变量即可。不能直接传常量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span> <span class="params">(<span class="keyword">int</span> *left, <span class="keyword">int</span> *right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> temp = *left;</span><br><span class="line">     *left = *right ;</span><br><span class="line">     *right = temp ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将引用作为返回值</p>
<ul>
<li>当函数返回时，如果有返回值，函数将返回值复制到指定的CPU寄存器或内存单元。随后调用程序去查看该单元。也就是说，函数计算完成后，还有一个复制的步骤。</li>
<li>返回对象时，会调用该对象的复制构造函数，来得到返回对象的一个拷贝。</li>
<li>如果返回的是对象的引用，就不会调用复制构造函数，效率更高。但是需要引用指向的对象已经存在</li>
<li>如果返回的对象是一个局部变量，就不能返回引用。因为局部变量在函数结束后就会被销毁，那么返回的引用就没有意义了。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> isbn;</span><br><span class="line">    Book()&#123;&#125;;</span><br><span class="line">    Book(<span class="keyword">int</span> a, <span class="keyword">int</span> b):price(a),isbn(b)&#123;&#125;</span><br><span class="line">    Book(Book&amp; b)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy constructor used!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回对象是局部变量。 这里不能返回引用</span></span><br><span class="line"><span class="function">Book <span class="title">compare</span><span class="params">(Book&amp; a, Book&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Book c = &#123;<span class="number">9</span>, <span class="number">456</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// c = compare(a, b); // 没有输出。 为什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里不返回引用，会调用b的复制构造函数</span></span><br><span class="line"><span class="function">Book <span class="title">compare</span><span class="params">(Book&amp; a, Book&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">c = compare(a, b); <span class="comment">// 会输出"copy constructor used!!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回引用的话，就不会调用b的复制构造函数</span></span><br><span class="line"><span class="function">Book <span class="title">compare</span><span class="params">(Book&amp; a, Book&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">c = compare(a, b); <span class="comment">// 没有输出</span></span><br></pre></td></tr></table></figure>
<h2 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h2>
<ul>
<li>vitural关键字表示 <strong>虚函数</strong>，虚函数的调用取决于指向或者引用的对象的类型，而不是指针或者引用自身的类型。</li>
<li><strong>纯虚函数</strong> 在基类中声明但不定义的虚函数，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加“=0”，如virtual void funtion1()=0；含有纯虚函数的类称为抽象类。</li>
<li>const:
<ul>
<li>修饰函数引用参数，表示只使用，不修改。并且可以接受const限定的变量。</li>
<li>类成员函数()后，表示不会对函数访问的对象进行修改。</li>
<li>修饰返回引用，因为引用是左值，不用const修饰，可能会有给函数赋值的迷惑操作。(如GenRef() = x;)</li>
<li>const修饰的变量必须在声明时就初始化。因为之后不允许赋值了。</li>
</ul>
</li>
<li>类成员初始化列表，即在构造函数()后加冒号，即Stack():size(50)。意为在构造函数执行之前，先将冒号后指定的成员初始化。可以使用构造函数的参数。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Stack s; <span class="comment">// 调用默认构造函数，创建一个stack对象，名称为s。</span></span><br><span class="line">Stack *ps = <span class="keyword">new</span> Stack; <span class="comment">// 调用默认构造函数，动态创建一个stack对象，并将ps指针指向该对象，这个对象没有名字，只能用箭头访问成员。</span></span><br></pre></td></tr></table></figure>
<h3 id="模板和纯虚函数"><a class="markdownIt-Anchor" href="#模板和纯虚函数"></a> 模板和纯虚函数</h3>
<p>如果是在模板类中定义的虚函数，其定义不能为内联函数形式。否则会报&quot;不允许使用抽象类类型 “SeqStack&lt;int&gt;” 的对象: – 纯虚拟 函数 “Stack&lt;T&gt;::IsEmpty [其中 T=int]” 没有强制替代项 – 纯虚拟 函数 “Stack&lt;T&gt;::IsFull [其中 T=int]” 没有强制替代项&quot;</p>
<h3 id="模板类中重载运算符"><a class="markdownIt-Anchor" href="#模板类中重载运算符"></a> 模板类中重载运算符</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在模板类中</span></span><br><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="comment">// 这里&lt;&gt;表示这是一个模板函数? 否则会报declares a non-template function</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt; &lt;&gt;(ostream &amp;os, SeqStack&lt;T&gt; &amp;s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确用法1 增加前置声明</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">SeqStack</span>;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">ostream</span> &amp;<span class="title">operator</span>&lt;&lt; &lt;&gt;(ostream &amp;os, SeqStack&lt;T&gt; &amp;s);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 正确用法2 直接在类内定义</span></span><br><span class="line"><span class="class">// 这里不加&lt;&gt;</span></span><br><span class="line"><span class="class">friend ostream &amp;operator&lt;&lt;(ostream &amp;os, SeqStack&lt;T&gt; &amp;s)&#123;</span></span><br><span class="line"><span class="class">    os &lt;&lt; "top = " &lt;&lt; s.top_ &lt;&lt; endl;</span></span><br><span class="line"><span class="class">    for (int i = 0; i &lt;= s.top_; i++)</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line"><span class="class">        os &lt;&lt; i &lt;&lt; ":" &lt;&lt; s.elements_[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return os;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure>
<h2 id="友元"><a class="markdownIt-Anchor" href="#友元"></a> 友元</h2>
<h3 id="友元函数"><a class="markdownIt-Anchor" href="#友元函数"></a> 友元函数</h3>
<p>以运算符的重载为例。</p>
<ul>
<li>作为类成员的重载运算符函数，左操作数是调用对象。右操作数是被当参数传递的对象。</li>
<li>非成员的的重载运算符函数，第一个参数是左操作数，第二个参数是右操作数。</li>
</ul>
<p>非成员的的重载运算符函数访问不了类的私有成员，除非将其<strong>原型放在类中声明，并用friend修饰</strong>。这种称为友元函数。友元函数不是真的类成员，但和类成员函数的访问权限相同。定义时也不用加上类限定符(Class:😃</p>
<h3 id="友元类"><a class="markdownIt-Anchor" href="#友元类"></a> 友元类</h3>
<p>电视和遥控器。遥控器要使用电视的某些功能，需要用到电视的某些私有/保护成员，这需要电视为遥控器提供访问权限。这可以通过在电视类中将遥控器类设为友元来实现(class TV{public: friend class RemoteControl; …})。这样，如果遥控器类获得了电视类的引用，就可以访问电视的私有/保护成员。</p>
<h3 id="友元成员函数"><a class="markdownIt-Anchor" href="#友元成员函数"></a> 友元成员函数</h3>
<p>遥控器类中只有一个方法需要使用电视类中的私有成员。那么可以在电视类中将遥控器类的指定方法设为友元(class TV{public: friend void Remote::SetChannel(Tv&amp; t, int ch); …})。</p>
<p>注意：此时需要特别注意类和方法的定义和声明<strong>顺序</strong>。</p>
<ul>
<li>在Tv类中声明Remote类的一个方法为友元前，需要先声明Remote类和该方法(编译器需要知道这个方法)。</li>
<li>在Remote类中声明SetChannel方法，需要先知道Tv是一个类，故需要先声明Tv类。为避免循环依赖，可以使用前置声明(forward declaration)，例如：class Tv;</li>
<li>如果Remote中的内联方法使用了Tv类的方法，那么编译器必须先看到Tv的声明。但由上可知，Remote类声明应该在Tv类之前。故不能再Remote类声明中写内联方法，而应该在Tv类声明之后再定义，并用inline修饰。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tv</span>;</span> <span class="comment">// 前置声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Remote</span>&#123;</span>...&#125;; <span class="comment">// 需要权限的方法声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tv</span>&#123;</span>...&#125;; <span class="comment">// 友元声明</span></span><br><span class="line"><span class="comment">// 需要权限的方法定义</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Remote::SetChannel</span><span class="params">(Tv&amp; t, <span class="keyword">int</span> ch)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h2 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h2>
<ul>
<li>new:new int[5] 中new仅仅是用malloc函数在堆中分配了指定大小的内存，并返回该内存的地址(地址是对象存储地址的起始)。</li>
<li>new出来的地址都要用delete释放。如果是T vars = new T[]分配的数组，用delete[] vars释放。</li>
<li>不要delete同一个内存块两次。</li>
<li>delete空指针是安全的。</li>
<li><strong>动态结构</strong>:structName *ps = new structName:这样创建的结构是在运行时动态创建的，且该结构没有名称，只知道其地址。因此，不能用句点访问结构的成员，而应该用箭头运算符来访问。</li>
</ul>
<h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2>
<h3 id="头文件的引用"><a class="markdownIt-Anchor" href="#头文件的引用"></a> 头文件的引用</h3>
<ul>
<li>系统自带的：&lt;math.h&gt; 用&lt;&gt;</li>
<li>自定义的： “user.h” 用&quot;&quot; 查找顺序为：用户目录-&gt;c++安装目录-&gt;系统文件</li>
</ul>
<h3 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h3>
<p>enum color {red, blue, yellow, black};</p>
<ul>
<li>color是新的(枚举)类名。</li>
<li>red,blue…成为符号常量，对应整数值0~3，称为枚举量。</li>
<li>枚举是整型，可以被提升为int，但反之不可以。</li>
<li>如果int值是有效的，则可以通过强制转换，将int值赋给枚举变量。color c;c = color(0);</li>
<li>可以设置枚举量的值，在定义枚举时用=赋值即可。</li>
<li>枚举量的值默认初始为0，之后没个没被初始化的枚举量的值比起前面一个大1。</li>
</ul>
<h3 id="c命名约定"><a class="markdownIt-Anchor" href="#c命名约定"></a> c++命名约定</h3>
<ul>
<li>常规函数驼峰，取值设值函数要求与相应的变量名对应(get,set小写)。</li>
<li>变量一律小写，单词之间用下划线隔开，类成员变量最后加个下划线以区分。</li>
<li>文件名也是小写加下划线</li>
</ul>
<h3 id="数组初始化规则"><a class="markdownIt-Anchor" href="#数组初始化规则"></a> 数组初始化规则</h3>
<ul>
<li>只有在定义数组时才能使用初始化，以后就不能使用了，也不能将一个数组赋给另一个数组。初始化后的数组只能用下标赋值。</li>
<li>部分初始化：给定的初始化列表的长度没有指定的数组长度大时，编译器将用给定值初始化最前面的n个元素，剩下的未指定值的元素都设为0。将数组所有初始化为0，只需要 <code>int arr[5] = {0}</code>即可。</li>
<li>C++11中，数组初始化可以不加等号。初始化为0可用 <code>int arr[5] = {}</code>。</li>
<li>禁止缩窄转化(即在初始化时有float-&gt;long之类的类型转换)。</li>
</ul>
<h3 id="typedef-结构体"><a class="markdownIt-Anchor" href="#typedef-结构体"></a> typedef 结构体</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> isbn;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">&#125;Book, *Pbook;</span><br><span class="line"></span><br><span class="line">Book b = &#123;.isbn=<span class="number">98741931</span>, .price=<span class="number">50</span>&#125;;</span><br><span class="line">Pbook pb = &amp;b; <span class="comment">// 这里pb就是Book类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在结构体定义中用到该结构体本身，则不能用匿名结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    Book *ref;</span><br><span class="line">&#125;Book, *Pbook;</span><br></pre></td></tr></table></figure>
<p>C++中结构体和类其实差不多。唯一的区别仅在于class默认成员是private的，而struct默认成员是public的。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2018/12/04/markdown/</url>
    <content><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<p>Markdown是一种轻量级的标记语言，以纯文本编写，以HTML格式发布。</p>
<a id="more"></a>
<h2 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h2>
<p>用1~6个&quot;#&quot;表示1到6级标题</p>
<h2 id="段落"><a class="markdownIt-Anchor" href="#段落"></a> 段落</h2>
<p>段落的前后要有空行，所谓的空行是指没有文字内容。<br />
若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。</p>
<h2 id="区块引用"><a class="markdownIt-Anchor" href="#区块引用"></a> 区块引用</h2>
<p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>区块引用</p>
<blockquote>
<p>嵌套</p>
</blockquote>
</blockquote>
<h2 id="代码区块"><a class="markdownIt-Anchor" href="#代码区块"></a> 代码区块</h2>
<p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。<br />
注意:需要和普通段落之间存在空行。</p>
<pre><code>void main(){
    printf(&quot;HelloMarkdown&quot;)
}
</code></pre>
<p>或者用```language ```表示代码区块，这种方法还会有相应的语法高亮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"javascript"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="强调"><a class="markdownIt-Anchor" href="#强调"></a> 强调</h2>
<p>使用&quot;*“或”_&quot;<br />
一个表示<em>斜体</em>  相当于 &lt;em&gt;<br />
两个表示__粗体__ 相当于 &lt;strong&gt;<br />
两个&quot;~~&quot;添加<s>删除线</s></p>
<h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2>
<h3 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h3>
<p>普通的用1.,2.,3.即可。<br />
注意：&quot;.&quot;后面要空一格</p>
<ol>
<li>html</li>
<li>js</li>
<li>css</li>
</ol>
<h3 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h3>
<p>每一项前面加&quot;*&quot;,&quot;+&quot;,&quot;-&quot;之一即可。<br />
注意：连续使用两个列表，中间要空两行，否则视为上一个列表的延续</p>
<ul>
<li>mysql</li>
<li>redis</li>
<li>oracle</li>
</ul>
<h2 id="分割线"><a class="markdownIt-Anchor" href="#分割线"></a> 分割线</h2>
<p>分割线使用三个或以上&quot;*&quot;</p>
<hr />
<h2 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h2>
<p>链接可以由两种形式生成：行内式和参考式。</p>
<h3 id="行内式"><a class="markdownIt-Anchor" href="#行内式"></a> 行内式</h3>
<p>[百度一下，你就知道](<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> “链接标题”)<br />
<a href="https://www.baidu.com" target="_blank" rel="noopener" title="链接标题">百度一下，你就知道</a></p>
<h3 id="参考式"><a class="markdownIt-Anchor" href="#参考式"></a> 参考式</h3>
<p>[链接文本1] [链接名称]<br />
[百度一下，你就知道2] [2]<br />
[链接名称]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> “链接标题1”<br />
[2]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> “提示信息2”</p>
<p>另一种写法<br />
[链接文本][]<br />
[链接文本]: url “链接标题”</p>
<p>hexo不支持参考式</p>
<h3 id="自动链接"><a class="markdownIt-Anchor" href="#自动链接"></a> 自动链接</h3>
<p><code>&lt;http://www.baidu.com&gt;</code><br />
<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p>
<h2 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h2>
<p>同链接，前面加一个&quot;!&quot;<br />
![](/images/ace.jpg “ace”)<br />
<img src="/images/ace.jpg" alt="" title="ace" /></p>
<h2 id="反斜杠"><a class="markdownIt-Anchor" href="#反斜杠"></a> 反斜杠</h2>
<p>转义符号，将符号变成普通符号</p>
<h2 id="反引号"><a class="markdownIt-Anchor" href="#反引号"></a> 反引号</h2>
<p>标记，<code>高亮</code></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
